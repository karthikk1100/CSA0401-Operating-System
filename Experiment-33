#include <stdio.h>
#include <stdbool.h>

#define MAX_FRAMES 3
#define MAX_PAGES 15

int frames[MAX_FRAMES];
int pages[MAX_PAGES];
int page_faults = 0;

// Function to initialize frames to -1
void initializeFrames() {
    for (int i = 0; i < MAX_FRAMES; i++) {
        frames[i] = -1;
    }
}

// Function to check if page is already in frame
bool isInFrames(int page) {
    for (int i = 0; i < MAX_FRAMES; i++) {
        if (frames[i] == page) {
            return true;
        }
    }
    return false;
}

// Function to find the optimal page to replace
int findOptimal(int start) {
    int replace_index = -1;
    int farthest = start;
    for (int i = 0; i < MAX_FRAMES; i++) {
        int j;
        for (j = start; j < MAX_PAGES; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    replace_index = i;
                }
                break;
            }
        }
        if (j == MAX_PAGES) {
            return i;
        }
    }
    return (replace_index == -1) ? 0 : replace_index;
}

// Function to simulate optimal page replacement
void simulateOptimal() {
    initializeFrames();

    for (int i = 0; i < MAX_PAGES; i++) {
        printf("\nPage reference: %d\n", pages[i]);
        if (!isInFrames(pages[i])) {
            int replace_index = findOptimal(i + 1);
            frames[replace_index] = pages[i];
            page_faults++;
            printf("Page fault occurred\n");
        } else {
            printf("No page fault\n");
        }
        printf("Current frames: ");
        for (int j = 0; j < MAX_FRAMES; j++) {
            printf("%d ", frames[j]);
        }
        printf("\n");
    }

    printf("\nTotal page faults: %d\n", page_faults);
}

int main() {
    // Reference string, you can modify it as needed
    int reference_string[MAX_PAGES] = {0, 1, 2, 0, 3, 0, 4, 2, 3, 1, 4, 2, 3, 0, 1};
    
    // Copy reference string to the pages array
    for (int i = 0; i < MAX_PAGES; i++) {
        pages[i] = reference_string[i];
    }

    simulateOptimal();

    return 0;
}
