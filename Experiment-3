#include <stdio.h>

struct Process {
    int pid;        // Process ID
    int arrival;    // Arrival time
    int burst;      // Burst time
};

void fcfs(struct Process processes[], int n) {
    int currentTime = 0;

    printf("Process\t Arrival Time\t Burst Time\t Waiting Time\t Turnaround Time\n");

    for (int i = 0; i < n; i++) {
        int waitingTime = currentTime - processes[i].arrival;
        if (waitingTime < 0)
            waitingTime = 0;

        int turnaroundTime = waitingTime + processes[i].burst;

        printf("%d\t %d\t\t %d\t\t %d\t\t %d\n", processes[i].pid, processes[i].arrival,
               processes[i].burst, waitingTime, turnaroundTime);

        currentTime += processes[i].burst;
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrival);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst);
        processes[i].pid = i + 1;
    }

    // Sort processes based on arrival time
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival > processes[j + 1].arrival) {
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    fcfs(processes, n);

    return 0;
}
