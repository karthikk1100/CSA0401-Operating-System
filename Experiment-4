#include <stdio.h>

struct Process {
    int pid;        // Process ID
    int burst;      // Burst time
    int executed;   // Execution status (1 if executed, 0 if not)
};

// Function to find the process with the smallest burst time
int findSmallestBurst(struct Process processes[], int n) {
    int smallest = -1;
    int smallestBurst = __INT_MAX__;

    for (int i = 0; i < n; i++) {
        if (processes[i].executed == 0 && processes[i].burst < smallestBurst) {
            smallestBurst = processes[i].burst;
            smallest = i;
        }
    }

    return smallest;
}

// Function to execute processes using shortest job first scheduling
void sjfScheduling(struct Process processes[], int n) {
    int currentTime = 0;
    int executedProcesses = 0;

    printf("Process Execution Order:\n");

    while (executedProcesses < n) {
        int smallestIndex = findSmallestBurst(processes, n);

        if (smallestIndex == -1) {
            printf("Error: No process found.\n");
            return;
        }

        printf("P%d ", processes[smallestIndex].pid);
        currentTime += processes[smallestIndex].burst;
        processes[smallestIndex].executed = 1;
        executedProcesses++;
    }

    printf("\n");
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst);
        processes[i].pid = i + 1;
        processes[i].executed = 0;
    }

    sjfScheduling(processes, n);

    return 0;
}
