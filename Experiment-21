#include <stdio.h>

#define MAX_BLOCKS 100

// Structure to represent a memory block
typedef struct {
    int size;
    int allocated;
} Block;

// Function prototypes
void bestFit(Block *memory, int numBlocks, int requestSize);
void initializeMemory(Block *memory, int numBlocks);

int main() {
    Block memory[MAX_BLOCKS];
    int numBlocks, requestSize;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &numBlocks);

    printf("Enter the size of each memory block:\n");
    for (int i = 0; i < numBlocks; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &memory[i].size);
        memory[i].allocated = 0; // Initialize all blocks as unallocated
    }

    printf("Enter the size of memory requested: ");
    scanf("%d", &requestSize);

    initializeMemory(memory, numBlocks);
    bestFit(memory, numBlocks, requestSize);

    return 0;
}

// Function to initialize memory blocks
void initializeMemory(Block *memory, int numBlocks) {
    printf("\nInitial Memory State:\n");
    for (int i = 0; i < numBlocks; i++) {
        printf("Block %d: Size: %d, Allocated: %s\n", i + 1, memory[i].size, memory[i].allocated ? "Yes" : "No");
    }
}

// Function to allocate memory using Best Fit algorithm
void bestFit(Block *memory, int numBlocks, int requestSize) {
    int bestFitBlock = -1;
    int minFragmentation = __INT_MAX__;

    for (int i = 0; i < numBlocks; i++) {
        if (!memory[i].allocated && memory[i].size >= requestSize) {
            int fragmentation = memory[i].size - requestSize;
            if (fragmentation < minFragmentation) {
                bestFitBlock = i;
                minFragmentation = fragmentation;
            }
        }
    }

    if (bestFitBlock != -1) {
        memory[bestFitBlock].allocated = 1;
        printf("\nMemory allocated successfully!\n");
        printf("Allocated Block: %d, Size: %d\n", bestFitBlock + 1, memory[bestFitBlock].size);
    } else {
        printf("\nMemory allocation failed. No suitable block found.\n");
    }
}
