#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10

typedef struct {
    int pid;            // Process ID
    int arrival_time;   // Arrival time
    int execution_time; // Execution time
    int completed;      // Flag to mark if process is completed
} Process;

void swap(Process *a, Process *b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}

void sort_by_arrival_time(Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival_time > processes[j + 1].arrival_time) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

void sjf(Process processes[], int n) {
    sort_by_arrival_time(processes, n);

    int current_time = 0;
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    printf("\nExecution Order:\n");
    for (int i = 0; i < n; i++) {
        int min_index = i;
        for (int j = i + 1; j < n; j++) {
            if (processes[j].execution_time < processes[min_index].execution_time && processes[j].arrival_time <= current_time) {
                min_index = j;
            }
        }

        if (min_index != i) {
            swap(&processes[min_index], &processes[i]);
        }

        printf("Time %d: Process %d\n", current_time, processes[i].pid);
        total_waiting_time += current_time - processes[i].arrival_time;
        current_time += processes[i].execution_time;
        total_turnaround_time += current_time - processes[i].arrival_time;
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    int num_processes;
    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);

    if (num_processes <= 0 || num_processes > MAX_PROCESSES) {
        printf("Invalid number of processes.\n");
        return 1;
    }

    Process processes[MAX_PROCESSES];

    // Input process details
    printf("Enter arrival time and execution time for each process:\n");
    for (int i = 0; i < num_processes; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].execution_time);
        processes[i].pid = i + 1;
        processes[i].completed = 0;
    }

    sjf(processes, num_processes);

    return 0;
}
