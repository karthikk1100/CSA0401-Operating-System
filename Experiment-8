#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10

typedef struct {
    int pid;            // Process ID
    int arrival_time;   // Arrival time
    int burst_time;     // Burst time
    int remaining_time; // Remaining burst time
    int completed;      // Flag to mark if process is completed
} Process;

int min(int a, int b) {
    return a < b ? a : b;
}

int main() {
    int num_processes, time_quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);

    if (num_processes <= 0 || num_processes > MAX_PROCESSES) {
        printf("Invalid number of processes.\n");
        return 1;
    }

    Process processes[MAX_PROCESSES];

    // Input process details
    printf("Enter time quantum for Round Robin: ");
    scanf("%d", &time_quantum);

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < num_processes; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].pid = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].completed = 0;
    }

    int current_time = 0;
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    printf("\nExecution Order:\n");
    while (1) {
        int all_completed = 1;
        for (int i = 0; i < num_processes; i++) {
            if (processes[i].completed == 0) {
                all_completed = 0;
                int execute_time = min(time_quantum, processes[i].remaining_time);
                processes[i].remaining_time -= execute_time;
                current_time += execute_time;

                printf("Time %d: Process %d\n", current_time, processes[i].pid);

                if (processes[i].remaining_time == 0) {
                    processes[i].completed = 1;
                    total_waiting_time += current_time - processes[i].arrival_time - processes[i].burst_time;
                    total_turnaround_time += current_time - processes[i].arrival_time;
                }
            }
        }
        if (all_completed)
            break;
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting_time / num_processes);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / num_processes);

    return 0;
}
