#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_READERS 5
#define NUM_WRITERS 2

sem_t mutex, wrt;
int read_count = 0;
int shared_data = 0;

void *reader(void *arg) {
    while (1) {
        sem_wait(&mutex);
        read_count++;
        if (read_count == 1) {
            sem_wait(&wrt);
        }
        sem_post(&mutex);

        printf("Reader %ld read data: %d\n", (long)arg, shared_data);
        usleep(100000); // Simulate reading time

        sem_wait(&mutex);
        read_count--;
        if (read_count == 0) {
            sem_post(&wrt);
        }
        sem_post(&mutex);

        usleep(500000); // Sleep before next read
    }
}

void *writer(void *arg) {
    while (1) {
        sem_wait(&wrt);
        shared_data++;
        printf("Writer %ld wrote data: %d\n", (long)arg, shared_data);
        sem_post(&wrt);

        usleep(800000); // Simulate writing time
    }
}

int main() {
    pthread_t readers[NUM_READERS], writers[NUM_WRITERS];
    long i;

    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    for (i = 0; i < NUM_READERS; i++) {
        pthread_create(&readers[i], NULL, reader, (void *)i);
    }
    for (i = 0; i < NUM_WRITERS; i++) {
        pthread_create(&writers[i], NULL, writer, (void *)i);
    }

    for (i = 0; i < NUM_READERS; i++) {
        pthread_join(readers[i], NULL);
    }
    for (i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writers[i], NULL);
    }

    sem_destroy(&mutex);
    sem_destroy(&wrt);

    return 0;
}
