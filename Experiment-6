#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10

typedef struct {
    int pid;            // Process ID
    int arrival_time;   // Arrival time
    int execution_time; // Execution time
    int remaining_time; // Remaining execution time
    int priority;       // Priority of the process (lower value indicates higher priority)
    int completed;      // Flag to mark if process is completed
} Process;

int main() {
    int num_processes;
    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);

    if (num_processes <= 0 || num_processes > MAX_PROCESSES) {
        printf("Invalid number of processes.\n");
        return 1;
    }

    Process processes[MAX_PROCESSES];

    // Input process details
    printf("Enter arrival time, execution time, and priority for each process:\n");
    for (int i = 0; i < num_processes; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].arrival_time, &processes[i].execution_time, &processes[i].priority);
        processes[i].pid = i + 1;
        processes[i].remaining_time = processes[i].execution_time;
        processes[i].completed = 0;
    }

    int current_time = 0;
    int completed_processes = 0;
    int last_executed_process = -1;

    printf("\nExecution Order:\n");
    while (completed_processes < num_processes) {
        int highest_priority_index = -1;
        int highest_priority = 99999; // A large initial value

        // Find the process with the highest priority among arriving processes
        for (int i = 0; i < num_processes; i++) {
            if (processes[i].arrival_time <= current_time && !processes[i].completed) {
                if (processes[i].priority < highest_priority) {
                    highest_priority_index = i;
                    highest_priority = processes[i].priority;
                }
            }
        }

        // If no process is available to execute, move time forward
        if (highest_priority_index == -1) {
            current_time++;
            continue;
        }

        // Execute the highest priority process
        if (last_executed_process != highest_priority_index) {
            printf("Time %d: Process %d\n", current_time, processes[highest_priority_index].pid);
        }
        processes[highest_priority_index].remaining_time--;
        current_time++;

        // Check if the process is completed
        if (processes[highest_priority_index].remaining_time == 0) {
            processes[highest_priority_index].completed = 1;
            completed_processes++;
        }

        last_executed_process = highest_priority_index;
    }

    return 0;
}
